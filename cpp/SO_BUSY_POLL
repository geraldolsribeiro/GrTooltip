SO_BUSY_POLL

(since Linux 3.11) Sets the approximate time in
microseconds to busy poll on a blocking receive when there is no data.
Increasing this value requires CAP_NET_ADMIN. The default for this
option is controlled by the /proc/sys/net/core/busy_read file.

The value in the /proc/sys/net/core/busy_poll file determines how long
select(2) and poll(2) will busy poll when they operate on sockets with
SO_BUSY_POLL set and no events to report are found.

In both cases, busy polling will only be done when the socket last
received data from a network device that supports this option.

While busy polling may improve latency of some applications, care must
be taken when using it since this will increase both CPU utilization and
power us‐ age.

Signals When writing onto a connection-oriented socket that has been
shut down (by the local or the remote end) SIGPIPE is sent to the
writing process and EPIPE is re‐ turned. The signal is not sent when the
write call specified the MSG_NOSIGNAL flag.

When requested with the FIOSETOWN fcntl(2) or SIOCSPGRP ioctl(2), SIGIO
is sent when an I/O event occurs. It is possible to use poll(2) or
select(2) in the sig‐ nal handler to find out which socket the event
occurred on. An alternative (in Linux 2.2) is to set a real-time signal
using the F_SETSIG fcntl(2); the handler of the real time signal will be
called with the file descriptor in the si_fd field of its siginfo_t. See
fcntl(2) for more information.

Under some circumstances (e.g., multiple processes accessing a single
socket), the condition that caused the SIGIO may have already
disappeared when the process reacts to the signal. If this happens, the
process should wait again because Linux will resend the signal later.

/proc interfaces The core socket networking parameters can be accessed
via files in the directory /proc/sys/net/core/.

rmem_default contains the default setting in bytes of the socket receive
buffer.

rmem_max contains the maximum socket receive buffer size in bytes which
a user may set by using the SO_RCVBUF socket option.

wmem_default contains the default setting in bytes of the socket send
buffer.

wmem_max contains the maximum socket send buffer size in bytes which a
user may set by using the SO_SNDBUF socket option.

message_cost and message_burst configure the token bucket filter used to
load limit warning messages caused by external network events.

netdev_max_backlog Maximum number of packets in the global input queue.

optmem_max Maximum length of ancillary data and user control data like
the iovecs per socket.

Ioctls These operations can be accessed using ioctl(2):

error = ioctl(ip_socket, ioctl_type, &value_result);

