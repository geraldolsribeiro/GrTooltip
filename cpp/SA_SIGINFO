SA_SIGINFO

(since Linux 2.2) The signal handler takes three arguments,
not one. In this case, sa_sigaction should be set instead of sa_handler.
This flag is meaningful only when es‐ tablishing a signal handler.

The siginfo_t argument to a SA_SIGINFO handler When the SA_SIGINFO flag
is specified in act.sa_flags, the signal handler address is passed via
the act.sa_sigaction field. This handler takes three arguments, as
follows:

void handler(int sig, siginfo_t *info, void *ucontext) { ... }

These three arguments are as follows

sig The number of the signal that caused invocation of the handler.

info A pointer to a siginfo_t, which is a structure containing further
information about the signal, as described below.

ucontext This is a pointer to a ucontext_t structure, cast to void *.
The structure pointed to by this field contains signal context
information that was saved on the user-space stack by the kernel; for
details, see sigreturn(2). Further information about the ucontext_t
structure can be found in getcontext(3) and signal(7). Commonly, the
handler function doesn't make any use of the third argument.

The siginfo_t data type is a structure with the following fields:

siginfo_t { int si_signo; /* Signal number */ int si_errno; /* An errno
value */ int si_code; /* Signal code */ int si_trapno; /* Trap number
that caused hardware-generated signal (unused on most architectures) */
pid_t si_pid; /* Sending process ID */ uid_t si_uid; /* Real user ID of
sending process */ int si_status; /* Exit value or signal */ clock_t
si_utime; /* User time consumed */ clock_t si_stime; /* System time
consumed */ union sigval si_value; /* Signal value */ int si_int; /*
POSIX.1b signal */ void *si_ptr; /* POSIX.1b signal */ int si_overrun;
/* Timer overrun count; POSIX.1b timers */ int si_timerid; /* Timer ID;
POSIX.1b timers */ void *si_addr; /* Memory location which caused fault
*/ long si_band; /* Band event (was int in glibc 2.3.2 and earlier) */
int si_fd; /* File descriptor */ short si_addr_lsb; /* Least significant
bit of address (since Linux 2.6.32) */ void *si_lower; /* Lower bound
when address violation occurred (since Linux 3.19) */ void *si_upper; /*
Upper bound when address violation occurred (since Linux 3.19) */ int
si_pkey; /* Protection key on PTE that caused fault (since Linux 4.6) */
void *si_call_addr; /* Address of system call instruction (since Linux
3.5) */ int si_syscall; /* Number of attempted system call (since Linux
3.5) */ unsigned int si_arch; /* Architecture of attempted system call
(since Linux 3.5) */ }

si_signo, si_errno and si_code are defined for all signals. (si_errno is
generally unused on Linux.) The rest of the struct may be a union, so
that one should read only the fields that are meaningful for the given
signal:

* Signals sent with kill(2) and sigqueue(3) fill in si_pid and si_uid.
In addition, signals sent with sigqueue(3) fill in si_int and si_ptr
with the values specified by the sender of the signal; see sigqueue(3)
for more details.

* Signals sent by POSIX.1b timers (since Linux 2.6) fill in si_overrun
and si_timerid. The si_timerid field is an internal ID used by the
kernel to identify the timer; it is not the same as the timer ID
returned by timer_create(2). The si_overrun field is the timer overrun
count; this is the same information as is ob‐ tained by a call to
timer_getoverrun(2). These fields are nonstandard Linux extensions.

* Signals sent for message queue notification (see the description of
SIGEV_SIGNAL in mq_notify(3)) fill in si_int/si_ptr, with the
sigev_value supplied to mq_notify(3); si_pid, with the process ID of the
message sender; and si_uid, with the real user ID of the message sender.

* SIGCHLD fills in si_pid, si_uid, si_status, si_utime, and si_stime,
providing information about the child. The si_pid field is the process
ID of the child; si_uid is the child's real user ID. The si_status field
contains the exit status of the child (if si_code is CLD_EXITED), or the
signal number that caused the process to change state. The si_utime and
si_stime contain the user and system CPU time used by the child process;
these fields do not include the times used by waited-for children
(unlike getrusage(2) and times(2)). In kernels up to 2.6, and since
2.6.27, these fields report CPU time in units of sysconf(_SC_CLK_TCK).
In 2.6 kernels before 2.6.27, a bug meant that these fields reported
time in units of the (configurable) system jiffy (see time(7)).

* SIGILL, SIGFPE, SIGSEGV, SIGBUS, and SIGTRAP fill in si_addr with the
address of the fault. On some architectures, these signals also fill in
the si_trapno field.

Some suberrors of SIGBUS, in particular BUS_MCEERR_AO and BUS_MCEERR_AR,
also fill in si_addr_lsb. This field indicates the least significant bit
of the re‐ ported address and therefore the extent of the corruption.
For example, if a full page was corrupted, si_addr_lsb contains
log2(sysconf(_SC_PAGESIZE)). When SIGTRAP is delivered in response to a
ptrace(2) event (PTRACE_EVENT_foo), si_addr is not populated, but si_pid
and si_uid are populated with the respective process ID and user ID
responsible for delivering the trap. In the case of seccomp(2), the
tracee will be shown as delivering the event. BUS_MCEERR_* and
si_addr_lsb are Linux-specific extensions.

The SEGV_BNDERR suberror of SIGSEGV populates si_lower and si_upper.

The SEGV_PKUERR suberror of SIGSEGV populates si_pkey.

* SIGIO/SIGPOLL (the two names are synonyms on Linux) fills in si_band
and si_fd. The si_band event is a bit mask containing the same values as
are filled in the revents field by poll(2). The si_fd field indicates
the file descriptor for which the I/O event occurred; for further
details, see the description of F_SETSIG in fcntl(2).

* SIGSYS, generated (since Linux 3.5) when a seccomp filter returns
SECCOMP_RET_TRAP, fills in si_call_addr, si_syscall, si_arch, si_errno,
and other fields as described in seccomp(2).

The si_code field The si_code field inside the siginfo_t argument that
is passed to a SA_SIGINFO signal handler is a value (not a bit mask)
indicating why this signal was sent. For a ptrace(2) event, si_code will
contain SIGTRAP and have the ptrace event in the high byte:

(SIGTRAP | PTRACE_EVENT_foo << 8).

For a non-ptrace(2) event, the values that can appear in si_code are
described in the remainder of this section. Since glibc 2.20, the
definitions of most of these symbols are obtained from <signal.h> by
defining feature test macros (before including any header file) as
follows:

* _XOPEN_SOURCE with the value 500 or greater;

* _XOPEN_SOURCE and _XOPEN_SOURCE_EXTENDED; or

* _POSIX_C_SOURCE with the value 200809L or greater.

For the TRAP_* constants, the symbol definitions are provided only in
the first two cases. Before glibc 2.20, no feature test macros were
required to obtain these symbols.

For a regular signal, the following list shows the values which can be
placed in si_code for any signal, along with the reason that the signal
was generated.

