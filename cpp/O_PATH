O_PATH

(since Linux 2.6.39) Obtain a file descriptor that can be used
for two purposes: to indicate a location in the filesystem tree and to
perform operations that act purely at the file descriptor level. The
file itself is not opened, and other file operations (e.g., read(2),
write(2), fchmod(2), fchown(2), fgetxattr(2), ioctl(2), mmap(2)) fail
with the error EBADF.

The following operations can be performed on the resulting file
descriptor:

* close(2).

* fchdir(2), if the file descriptor refers to a directory (since Linux
3.5).

* fstat(2) (since Linux 3.6).

* fstatfs(2) (since Linux 3.12).

* Duplicating the file descriptor (dup(2), fcntl(2) F_DUPFD, etc.).

* Getting and setting file descriptor flags (fcntl(2) F_GETFD and
F_SETFD).

* Retrieving open file status flags using the fcntl(2) F_GETFL
operation: the returned flags will include the bit O_PATH.

* Passing the file descriptor as the dirfd argument of openat() and the
other "*at()" system calls. This includes linkat(2) with AT_EMPTY_PATH
(or via procfs using AT_SYMLINK_FOLLOW) even if the file is not a
directory.

* Passing the file descriptor to another process via a UNIX domain
socket (see SCM_RIGHTS in unix(7)).

When O_PATH is specified in flags, flag bits other than O_CLOEXEC,
O_DIRECTORY, and O_NOFOLLOW are ignored.

Opening a file or directory with the O_PATH flag requires no permissions
on the object itself (but does require execute permission on the
directories in the path prefix). Depending on the subsequent operation,
a check for suitable file permissions may be performed (e.g., fchdir(2)
requires execute permis‐ sion on the directory referred to by its file
descriptor argument). By contrast, obtaining a reference to a filesystem
object by opening it with the O_RDONLY flag requires that the caller
have read permission on the object, even when the subsequent operation
(e.g., fchdir(2), fstat(2)) does not require read permission on the
object.

If pathname is a symbolic link and the O_NOFOLLOW flag is also
specified, then the call returns a file descriptor referring to the
symbolic link. This file descriptor can be used as the dirfd argument in
calls to fchownat(2), fstatat(2), linkat(2), and readlinkat(2) with an
empty pathname to have the calls operate on the symbolic link.

If pathname refers to an automount point that has not yet been
triggered, so no other filesystem is mounted on it, then the call
returns a file descriptor referring to the automount directory without
triggering a mount. fstatfs(2) can then be used to determine if it is,
in fact, an untriggered automount point (.f_type == AUTOFS_SUPER_MAGIC).

One use of O_PATH for regular files is to provide the equivalent of
POSIX.1's O_EXEC functionality. This permits us to open a file for which
we have exe‐ cute permission but not read permission, and then execute
that file, with steps something like the following:

char buf[PATH_MAX]; fd = open("some_prog", O_PATH); snprintf(buf,
PATH_MAX, "/proc/self/fd/%d", fd); execl(buf, "some_prog", (char *)
NULL);

An O_PATH file descriptor can also be passed as the argument of
fexecve(3).

