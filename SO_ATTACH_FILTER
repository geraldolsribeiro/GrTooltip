SO_ATTACH_FILTER

(since Linux 2.2), SO_ATTACH_BPF (since Linux 3.19)
Attach a classic BPF (SO_ATTACH_FILTER) or an extended BPF
(SO_ATTACH_BPF) program to the socket for use as a filter of incoming
packets. A packet will be dropped if the filter program returns zero. If
the filter program returns a nonzero value which is less than the
packet's data length, the packet will be truncated to the length
returned. If the value returned by the filter is greater than or equal
to the packet's data length, the packet is allowed to proceed
unmodified.

The argument for SO_ATTACH_FILTER is a sock_fprog structure, defined in
<linux/filter.h>:

struct sock_fprog { unsigned short len; struct sock_filter *filter; };

The argument for SO_ATTACH_BPF is a file descriptor returned by the
bpf(2) system call and must refer to a program of type
BPF_PROG_TYPE_SOCKET_FILTER.

These options may be set multiple times for a given socket, each time
replacing the previous filter program. The classic and extended versions
may be called on the same socket, but the previous filter will always be
replaced such that a socket never has more than one filter defined.

Both classic and extended BPF are explained in the kernel source file
Documentation/networking/filter.txt

SO_ATTACH_REUSEPORT_CBPF, SO_ATTACH_REUSEPORT_EBPF For use with the
SO_REUSEPORT option, these options allow the user to set a classic BPF
(SO_ATTACH_REUSEPORT_CBPF) or an extended BPF (SO_ATTACH_REUSE‚Äê
PORT_EBPF) program which defines how packets are assigned to the sockets
in the reuseport group (that is, all sockets which have SO_REUSEPORT set
and are using the same local address to receive packets).

The BPF program must return an index between 0 and N-1 representing the
socket which should receive the packet (where N is the number of sockets
in the group). If the BPF program returns an invalid index, socket
selection will fall back to the plain SO_REUSEPORT mechanism.

Sockets are numbered in the order in which they are added to the group
(that is, the order of bind(2) calls for UDP sockets or the order of
listen(2) calls for TCP sockets). New sockets added to a reuseport group
will inherit the BPF program. When a socket is removed from a reuseport
group (via close(2)), the last socket in the group will be moved into
the closed socket's position.

These options may be set repeatedly at any time on any socket in the
group to replace the current BPF program used by all sockets in the
group.

